Require Export
  Bourbaki.Equality.Relation.Inequality
  Bourbaki.Set.Relation.NonEmptiness
  Bourbaki.Set.Results.CollectivizingEssence
  Bourbaki.Set.Results.EmptySet.

Module Complement.
  Section Complement.
    Context `{Set_.Theory}.

    Theorem of_empty_set :
      ‚ä¢ ‚àÄ x, ‚àÅ x ‚àÖ = x.
    Proof.
      Rewrite Set_.equality‚Çë.
      Intros X x.
      Rewrite MembershipEquivalenceProof.proof.
      Apply Conjunction.operand_removal_left.
      Apply EmptySet.emptiness.
    Qed.

    Theorem of_set_relative_to_itself :
      ‚ä¢ ‚àÄ x, ‚àÅ x x = ‚àÖ.
    Proof.
      Rewrite EmptySet.as_equal‚Çë.
      Apply Complement.of_set_relative_to_itself_emptiness.
    Qed.
  End Complement.
End Complement.

Module NonEmptiness.
  Section NonEmptiness.
    Context `{Set_.Theory}.

    Theorem alternative_definition :
      ‚ä¢ ‚àÄ x, is_non_empty x ‚áî ¬¨is_empty x.
    Proof.
      Intros X.
      Rewrite Universality.negation‚Çë.
      Rewrite Negation.double_removal‚Çë.
    Qed.

    Theorem alternative_definition‚ÇÇ :
      ‚ä¢ ‚àÄ x, is_non_empty x ‚áî x ‚â† ‚àÖ.
    Proof.
      Intros x.
      unfold inequality.
      Rewrite EmptySet.as_equal‚Çë.
      Apply NonEmptiness.alternative_definition.
    Qed.
  End NonEmptiness.
End NonEmptiness.

Module Singleton.
  Section Singleton.
    Context `{Set_.Theory}.

    (* Ex_E_II_1__4 *)
    Theorem as_superset‚Çë {X x} :
      ‚ä¢ X ‚äÇ {x,} ‚áî X = {x,} ‚à® X = ‚àÖ.
    Proof.
      Rewrite Set_.equality‚Çë‚ÇÇ at 1.
      Rewrite Singleton.as_subset‚Çë.
      Rewrite Disjunction.distributivity_over_conjunction_right.
      Rewrite (Disjunction.operand_removal_right _ (_ ‚äÇ _)).
      { Rewrite (Conjunction.operand_removal_right (_ ‚äÇ _)).
        Rewrite (Disjunction.commutativity (_ ‚àà _)).
        Rewrite <- (Negation.as_condition‚Çë (_ = _)).
        Rewrite <- NonEmptiness.alternative_definition‚ÇÇ.
        Intros H‚ÇÅ [y H‚ÇÇ].
        Rewrite <- (_ : y ‚ä¢= x).
        { Apply (MembershipEquivalenceProof.proof _ (fun y => y = x)).
          Apply H‚ÇÅ.
          Assumption. }
        { Assumption. } }
      { Intros H‚ÇÅ.
        Rewrite H‚ÇÅ.
        Apply EmptySet.subset_essence. }
    Qed.
  End Singleton.
End Singleton.

Module Other.
  Section Other.
    Context `{Set_.Theory}.

    Lemma Pr_E_II_1__2 :
      ‚ä¢ ‚àÄ x y z, x ‚äÇ y ‚àß y ‚äÇ z ‚áí x ‚äÇ z.
    Proof.
      Rewrite Conjunction.as_condition‚Çë.
      Apply Inclusion.transitivity.
    Qed.

    Lemma Exa_E_II_1_4__2 :
      ‚ä¢ ¬¨Coll (fun x => x ‚àâ x).
    Proof.
      Intros [X contra‚ÇÅ].
      Apply Equivalence.impossibility.
      Assumption.
    Qed.

    Lemma C50_i {ùêë ùêí} `(!IsCollectivizing ùêë) `(!IsCollectivizing ùêí) :
      ‚ä¢ (‚àÄ x, ùêë x ‚áí ùêí x) ‚áî {x | ùêë x} ‚äÇ {x | ùêí x}.
    Proof.
      Rewrite CollectivizingSet.inclusion‚Çë.
    Qed.

    Lemma C50_ii {ùêë ùêí} `(!IsCollectivizing ùêë) `(!IsCollectivizing ùêí) :
      ‚ä¢ (‚àÄ x, ùêë x ‚áî ùêí x) ‚áî {x | ùêë x} = {x | ùêí x}.
    Proof.
      Rewrite CollectivizingSet.equality‚Çë.
    Qed.

    Lemma Rem_E_II_1__1 ùêí {ùêë} `(!IsCollectivizing ùêë) :
      (‚ä¢ ‚àÄ x, ùêí x ‚áí ùêë x) -> IsCollectivizing ùêí.
    Proof.
      Intros H‚ÇÅ.
      Apply CollectivizingEssence.from_container_set.
      Intros x.
      Rewrite (MembershipEquivalenceProof.proof {x | ùêë x}).
      Assumption.
    Qed.

    Lemma Rem_E_II_1__2 :
      ‚ä¢ ¬¨‚àÉ X, ‚àÄ x, x ‚àà X.
    Proof.
      Intros [X contra‚ÇÅ].
      Apply Other.Exa_E_II_1_4__2.
      Apply CollectivizingEssence.from_container_set.
      Intros x _.
      Assumption.
    Qed.

    Lemma Ex_E_II_1__1 x y :
      ‚ä¢ x = y ‚áî ‚àÄ X, x ‚àà X ‚áí y ‚àà X.
    Proof.
      Intros [H‚ÇÅ X | H‚ÇÅ].
      { Rewrite H‚ÇÅ. }
      { Symmetry.
        Apply (MembershipEquivalenceProof.proof _ (fun y => y = x)).
        Apply H‚ÇÅ.
        Apply MembershipEquivalenceProof.proof.
        Reflexivity. }
    Qed.

    Lemma Ex_E_II_1__2_i x :
      ‚ä¢ ‚àÖ ‚â† {x,}.
    Proof.
      Intros contra‚ÇÅ.
      Apply EmptySet.emptiness; Change (‚ä¢ _ ‚àà _).
      Rewrite contra‚ÇÅ.
      Apply MembershipEquivalenceProof.proof.
      Reflexivity.
    Qed.

    Lemma Ex_E_II_1__2_ii :
      ‚ä¢ ‚àÉ x y, x ‚â† y.
    Proof.
      Apply Other.Ex_E_II_1__2_i.
      Apply Util.default.
    Qed.

    Lemma Ex_E_II_1__5 :
      ‚ä¢ ‚àÖ = œÑ X, (œÑ x, x ‚àà X) ‚àâ X.
    Proof.
      unfold empty_set;
        Change (‚ä¢ (œÑ X, _) = _).
      Rewrite Universality.alternative_definition.
      Rewrite Negation.double_removal‚Çë.
    Qed.
  End Other.

  Section Ex_E_II_1__6.
    Context `{Equality.Theory, !Set_.Syntax}.
    Context (A1' : ‚ä¢ ‚àÄ y, y = œÑ x, ‚àÄ z, z ‚àà x ‚áî z ‚àà y).

    Lemma Ex_E_II_1__6 :
      ‚ä¢ ‚àÄ x y, x ‚äÇ y ‚áí y ‚äÇ x ‚áí x = y.
    Proof.
      Intros X Y H‚ÇÅ H‚ÇÇ.
      Rewrite A1'.
      Rewrite (_ : ‚ä¢ ‚àÄ z, z ‚àà X ‚áî z ‚àà Y).
      Apply Universality.split.
      Intros [|];
        Assumption.
    Qed.
  End Ex_E_II_1__6.
End Other.